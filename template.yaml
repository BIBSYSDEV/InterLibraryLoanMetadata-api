AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Sets up lambda, api and base path mapping to fetch most recent publication for an author
Parameters:
  CustomDomain:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/api/domainName'
    Description: (Optional) Custom domain name for the API endpoint
  CustomDomainBasePath:
    Type: String
    Default: 'ill'
    Description: (Optional) Base path mapping in CustomDomain
    AllowedPattern: "^[a-zA-Z0-9$\\-_.+!*'(),]*$"
    ConstraintDescription: "May contain only letters, numbers and one of $-_.+!*'(),"
  Stage:
    Type: AWS::SSM::Parameter::Value<String>
    Default: 'environment'
    Description: dev/test/prod
  PrimoServiceEndpoint:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Url Endpoints to the Primo API
    Default: '/primo/pnxServiceEndpoint'
  PrimoServiceApiKey:
    Type: String
    Description: Api key for contacting the Primo API
    Default: "{{resolve:secretsmanager:apiKeyPrimo:SecretString:apiKeyPrimo}}"
    NoEcho: true
  BaseBibliotekServiceEndpoint:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Url Endpoint to the BaseBibliotek server
    Default: '/nb/baseBibliotekEndpoint'
  MaxConcurrency:
    Type: Number
    Default: 20
    Description: Max number of provisioned hot instances for a lambda function
  MinConcurrency:
    Type: Number
    Default: 1
    MaxValue: 1
    MinValue: 1
    Description: Min number of provisioned hot instances for a lambda function

Conditions:
  HasDomainName: !Not [!Equals [!Ref CustomDomain, '']]
  HasCustomDomainBasePath: !Not [!Equals [!Ref CustomDomainBasePath, '']]

Globals:
  Function:
    Timeout: 20
  Api:
    Cors:
      AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
      AllowMethods: '''OPTIONS, GET'''
      AllowOrigin: '''*'''
    EndpointConfiguration: REGIONAL

Resources:
  InterLibraryLoanMetadataApi:
    Type: AWS::Serverless::Api
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W64
            reason: "Skip access logging for artifacts bucket"
          - id: W68
            reason: "Skip encryption for artifacts bucket"
          - id: W69
            reason: "Skip bucket policy for artifacts bucket"
          - id: W89
            reason: "Lambda functions should be deployed inside a VPC"
          - id: W92
            reason: "Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions"
    Properties:
      Name: !Sub "${AWS::StackName}"
      StageName: v1
      EndpointConfiguration:
        Type: REGIONAL
      MethodSettings:
        - ResourcePath: /ncip
          HttpMethod: POST
          ThrottlingBurstLimit: 2
          ThrottlingRateLimit: 2
        - ResourcePath: /metadata
          HttpMethod: GET
          ThrottlingBurstLimit: 10
          ThrottlingRateLimit: 10
        - ResourcePath: /libcheck
          HttpMethod: GET
          ThrottlingBurstLimit: 10
          ThrottlingRateLimit: 10
      DefinitionBody:
        openapi: 3.0.3
        info:
          title: Inter Library Loan Metadata API
          version: '1.0'
        x-amazon-apigateway-request-validators:
          all:
            validateRequestBody: true
            validateRequestParameters: true
          params-only:
            validateRequestBody: false
            validateRequestParameters: true
          body-only:
            validateRequestBody: true
            validateRequestParameters: false
        paths:
          /metadata:
            get:
              summary: Get bibliographic metadata by document id
              description: gets bibliographic metadata by document_id
              consumes:
                - application/json
              produces:
                - application/json
              parameters:
                - in: query
                  name: document_id
                  required: true
                  type: string
                  description: document_id
              x-amazon-apigateway-request-validator : params-only
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetInterLibraryLoanMetadataRecordFunction.Arn}:live/invocations
                responses: {}
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '200':
                  description: inter library loan metadata
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/getInterLibraryLoanRecordResponseBody'
                '400':
                  description: Bad request.
                  content:
                    application/json:
                      schema:
                        title: 400 Bad request
                        type: object
                        properties:
                          error:
                            type: string
                            description: error message
                '500':
                  description: Internal server error.
                  content:
                    application/json:
                      schema:
                        title: 500 internal server error
                        type: object
                        properties:
                          error:
                            type: string
                            description: error message
          /ncip:
            post:
              summary: Ncip message to send
              description: sends NCIP message to external ncip-server
              consumes:
                - application/json
              produces:
                - application/json
              parameters:
                - in: ncip
                  name: ncip
                  required: true
                  type: string
                  description: ncip message
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostInterLibraryLoanNcipFunction.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '200':
                  description: inter library loan metadata
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/putInterLibraryLoanNcipResponseBody'
                '400':
                  description: Bad request.
                  content:
                    application/json:
                      schema:
                        title: 400 Bad request
                        type: object
                        properties:
                          error:
                            type: string
                            description: error message
                '500':
                  description: Internal server error.
                  content:
                    application/json:
                      schema:
                        title: 500 internal server error
                        type: object
                        properties:
                          error:
                            type: string
                            description: error message
          /libcheck:
            get:
              summary: Get library ncip and alma status
              description: Retrieves whether library has ncip server and/or is alma library
              consumes:
                - application/json
              produces:
                - application/json
              parameters:
                - in: query
                  name: libuser
                  required: true
                  type: string
                  description: libuser
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetInterLibraryLoanLibcheckFunction.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: AWS_PROXY
              responses:
                '200':
                  description: Library ncip and alma status
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/getInterLibraryLoanLibcheckResponseBody'
                '400':
                  description: Bad request.
                  content:
                    application/json:
                      schema:
                        title: 400 Bad request
                        type: object
                        properties:
                          error:
                            type: string
                            description: error message
                '500':
                  description: Internal server error.
                  content:
                    application/json:
                      schema:
                        title: 500 internal server error
                        type: object
                        properties:
                          error:
                            type: string
                            description: error message

        components:
          schemas:
            getInterLibraryLoanRecordResponseBody:
              title: inter library loan metadata record
              type: object
              properties:
                title:
                  type: string
                  description: bibliographic record containing metadata
            postInterLibraryLoanNcipResponseBody:
              title: inter library loan ncip response
              type: object
              properties:
                title:
                  type: string
                  description: response message from ncip-server
            getInterLibraryLoanLibcheckResponseBody:
              title: Inter library loan library check
              type: object
              properties:
                isAlmaLibrary:
                  type: boolean
                  description: Library is Alma library
                isNcipLibrary:
                  type: boolean
                  description: Library has NCIP server

  GetInterLibraryLoanMetadataRecordFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          STAGE: !Ref Stage
          BASEBIBLIOTEKSERVICE_ENDPOINT: !Ref BaseBibliotekServiceEndpoint
          PRIMO_SERVICE_ENDPOINT: !Ref PrimoServiceEndpoint
          PRIMO_SERVICE_API: !Ref PrimoServiceApiKey
      Handler: no.unit.MetadataHandler::handleRequest
      Runtime: java11
      MemorySize: 2048
      AutoPublishAlias: live
      DeploymentPreference:
        Type: AllAtOnce # Or Canary10Percent5Minutes, Linear10PercentEvery1Minute, ...
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: 1
      Events:
        GetInterLibraryLoanMetadataRecordEvent:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref InterLibraryLoanMetadataApi
            Method: get
            Path: /metadata
      Timeout: 60

  PostInterLibraryLoanNcipFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Environment:
        Variables:
          ALLOWED_ORIGIN:  '*'
      Handler: no.unit.ncip.NcipHandler::handleRequest
      Runtime: java11
      MemorySize: 1024
      Events:
        PutEvent:
          Type: Api
          Properties:
            RestApiId: !Ref InterLibraryLoanMetadataApi
            Method: post
            Path: /ncip


  GetInterLibraryLoanLibcheckFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          BASEBIBLIOTEKSERVICE_ENDPOINT: !Ref BaseBibliotekServiceEndpoint
      Handler: no.unit.libcheck.LibcheckHandler::handleRequest
      Runtime: java11
      MemorySize: 1024
      Events:
        GetInterLibraryLoanLibcheckEvent:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref InterLibraryLoanMetadataApi
            Method: get
            Path: /libcheck

  PostInterLibraryLoanNcipFunctionAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "PostInterLibraryLoanNcipFunctionAlarm-${AWS::StackName}"
      AlarmDescription: 'Alot of invocations (NCIP requests) alarm. Take action (disable lambda) if not "real" requests.'
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref PostInterLibraryLoanNcipFunction
      MetricName: Invocations
      Statistic: Sum
      Period: 600 #10 minutes
      EvaluationPeriods: 1
      Threshold: 100
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref PostInterLibraryLoanNcipFunctionAlarmNotification

  PostInterLibraryLoanNcipFunctionAlarmNotification:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "PostInterLibraryLoanNcipFunctionAlarmNotification-${AWS::StackName}"

  GetInterLibraryLoanMetadataRecordFunctionScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref MaxConcurrency
      MinCapacity: !Ref MinConcurrency
      ResourceId: !Sub function:${GetInterLibraryLoanMetadataRecordFunction}:live # You need to specify an alis or version here
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/lambda.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_LambdaConcurrency
      ScalableDimension: lambda:function:ProvisionedConcurrency
      ServiceNamespace: lambda
    DependsOn: GetInterLibraryLoanMetadataRecordFunctionAliaslive # This is your function logical ID + "Alias" + what you use for AutoPublishAlias

  GetInterLibraryLoanMetadataRecordFunctionScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: GetInterLibraryLoanMetadataRecordFunctionScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref GetInterLibraryLoanMetadataRecordFunctionScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 0.70 # Any value between 0.1 and 0.9 can be used here
        PredefinedMetricSpecification:
          PredefinedMetricType: LambdaProvisionedConcurrencyUtilization

  CloudWatchEventRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -   Effect: "Allow"
              Principal:
                Service:
                  -   !Sub lambda.amazonaws.com
                  -   !Sub events.amazonaws.com
              Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        -   PolicyName: CloudWatchEventPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                -   Effect: Allow
                    Action:
                      -   "lambda:InvokeFunction"
                    Resource: "*"

  CWEventRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: "Description"
      Name: "CWEventRule"
      ScheduleExpression: "cron(0/5 6-16 ? * MON-SAT *)"
      State: "ENABLED"
      RoleArn: !GetAtt [ CloudWatchEventRole, Arn ]
      Targets:
        -
          Arn:
            Fn::GetAtt:
              -   "GetInterLibraryLoanMetadataRecordFunction"
              -   "Arn"
          Id: "GetInterLibraryLoanMetadataRecordFunction"
        -
          Arn:
            Fn::GetAtt:
              -   "GetInterLibraryLoanLibcheckFunction"
              -   "Arn"
          Id: "GetInterLibraryLoanLibcheckFunction"

  InterLibraryLoanMetadataBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Condition: HasDomainName
    Properties:
      BasePath: !If
        - HasCustomDomainBasePath
        - !Ref CustomDomainBasePath
        - !Ref 'AWS::NoValue'
      DomainName: !Ref CustomDomain
      RestApiId: !Ref InterLibraryLoanMetadataApi
      Stage: !Ref InterLibraryLoanMetadataApi.Stage

Outputs:
  ApiEndpoint:
    Description: "Endpoint base URL for the API"
    Value: !If
      - HasDomainName
      - !Sub "https://${CustomDomain}/${CustomDomainBasePath}"
      - !Sub "https://${InterLibraryLoanMetadataApi}.execute-api.${AWS::Region}.amazonaws.com/${InterLibraryLoanMetadataApi.Stage}/"
